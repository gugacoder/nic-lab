"""
DOCX Generation Example
Demonstrates python-docx usage for creating formatted Word documents
"""

from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.style import WD_STYLE_TYPE
import os
from datetime import datetime


def create_sample_document():
    """Create a sample DOCX document with various formatting"""
    
    # Create document
    doc = Document()
    
    # Add document properties
    doc.core_properties.title = "NIC Chat Generated Document"
    doc.core_properties.author = "NIC Chat System"
    doc.core_properties.subject = "AI-Generated Content"
    doc.core_properties.keywords = "AI, Documentation, NIC Chat"
    
    # Add title
    title = doc.add_heading('NIC Chat Document Generation Example', 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add subtitle with custom formatting
    subtitle = doc.add_paragraph()
    subtitle_run = subtitle.add_run('Demonstrating Document Formatting Capabilities')
    subtitle_run.font.size = Pt(14)
    subtitle_run.font.color.rgb = RGBColor(0x42, 0x42, 0x42)
    subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph()  # Empty line
    
    # Add introduction
    doc.add_heading('Introduction', level=1)
    intro = doc.add_paragraph(
        'This document demonstrates the various formatting capabilities available '
        'when generating DOCX files from the NIC Chat system. The system can create '
        'professional documents with rich formatting, images, tables, and more.'
    )
    intro.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
    
    # Add formatted text section
    doc.add_heading('Text Formatting', level=1)
    
    # Paragraph with mixed formatting
    p = doc.add_paragraph('This paragraph demonstrates ')
    p.add_run('bold text').bold = True
    p.add_run(', ')
    p.add_run('italic text').italic = True
    p.add_run(', and ')
    underline_run = p.add_run('underlined text')
    underline_run.underline = True
    p.add_run('. You can also use ')
    highlight_run = p.add_run('highlighted text')
    highlight_run.font.highlight_color = WD_COLOR_INDEX.YELLOW
    p.add_run(' for emphasis.')
    
    # Lists
    doc.add_heading('Lists', level=2)
    doc.add_paragraph('Bullet list example:', style='List Bullet')
    doc.add_paragraph('First item with some text', style='List Bullet')
    doc.add_paragraph('Second item with more content', style='List Bullet')
    doc.add_paragraph('Third item in the list', style='List Bullet')
    
    doc.add_paragraph('Numbered list example:')
    doc.add_paragraph('Initial setup step', style='List Number')
    doc.add_paragraph('Configuration process', style='List Number')
    doc.add_paragraph('Final verification', style='List Number')
    
    # Tables
    doc.add_heading('Tables', level=1)
    doc.add_paragraph('Below is a sample table with formatting:')
    
    # Create table
    table = doc.add_table(rows=1, cols=4)
    table.style = 'Light Grid Accent 1'
    
    # Add header row
    header_cells = table.rows[0].cells
    header_cells[0].text = 'Feature'
    header_cells[1].text = 'Description'
    header_cells[2].text = 'Status'
    header_cells[3].text = 'Priority'
    
    # Add data rows
    data = [
        ('Chat Interface', 'Interactive chat with AI', 'Completed', 'High'),
        ('Document Generation', 'Create DOCX/PDF files', 'In Progress', 'High'),
        ('GitLab Integration', 'Connect to repositories', 'Completed', 'Critical'),
        ('Image Support', 'Embed images in documents', 'Planned', 'Medium'),
    ]
    
    for feature, desc, status, priority in data:
        row_cells = table.add_row().cells
        row_cells[0].text = feature
        row_cells[1].text = desc
        row_cells[2].text = status
        row_cells[3].text = priority
        
        # Color code status
        if status == 'Completed':
            row_cells[2].paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 128, 0)
        elif status == 'In Progress':
            row_cells[2].paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 140, 0)
    
    # Code blocks
    doc.add_heading('Code Examples', level=1)
    doc.add_paragraph('Python code example:')
    
    code = doc.add_paragraph()
    code_run = code.add_run('''def generate_document(content):
    """Generate a DOCX document from content"""
    doc = Document()
    doc.add_heading(content['title'], 0)
    for section in content['sections']:
        doc.add_heading(section['title'], 1)
        doc.add_paragraph(section['content'])
    return doc''')
    code_run.font.name = 'Courier New'
    code_run.font.size = Pt(10)
    code_run.font.color.rgb = RGBColor(0, 0, 139)
    
    # Add page break
    doc.add_page_break()
    
    # Additional content on new page
    doc.add_heading('Document Metadata', level=1)
    metadata = doc.add_paragraph()
    metadata.add_run('Generated by: ').bold = True
    metadata.add_run('NIC Chat System\n')
    metadata.add_run('Generation Date: ').bold = True
    metadata.add_run(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    metadata.add_run('Format: ').bold = True
    metadata.add_run('Microsoft Word DOCX')
    
    # Footer section
    doc.add_heading('Conclusion', level=1)
    conclusion = doc.add_paragraph(
        'This example demonstrates the key formatting capabilities available in the '
        'NIC Chat document generation system. The system can create professional, '
        'well-formatted documents suitable for corporate use.'
    )
    
    return doc


def add_styles_example(doc):
    """Example of creating custom styles"""
    
    # Create a custom paragraph style
    styles = doc.styles
    custom_style = styles.add_style('CustomBody', WD_STYLE_TYPE.PARAGRAPH)
    custom_style.font.name = 'Calibri'
    custom_style.font.size = Pt(11)
    custom_style.paragraph_format.space_after = Pt(6)
    custom_style.paragraph_format.line_spacing = 1.15
    
    # Create a custom heading style
    custom_heading = styles.add_style('CustomHeading', WD_STYLE_TYPE.PARAGRAPH)
    custom_heading.font.name = 'Arial'
    custom_heading.font.size = Pt(16)
    custom_heading.font.bold = True
    custom_heading.font.color.rgb = RGBColor(0, 51, 102)
    custom_heading.paragraph_format.space_before = Pt(12)
    custom_heading.paragraph_format.space_after = Pt(6)


# Example usage
if __name__ == "__main__":
    # Create document
    document = create_sample_document()
    
    # Add custom styles
    add_styles_example(document)
    
    # Save document
    output_path = 'nic_chat_example.docx'
    document.save(output_path)
    print(f"Document saved to: {output_path}")
    
    # Print document statistics
    print(f"\nDocument Statistics:")
    print(f"- Paragraphs: {len(document.paragraphs)}")
    print(f"- Tables: {len(document.tables)}")
    print(f"- Sections: {len(document.sections)}")
    print(f"- Styles: {len(document.styles)}")